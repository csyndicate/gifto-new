<?php

/**
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
namespace ShopMagicTwilioVendor\Twilio\Rest\Verify\V2;

use ShopMagicTwilioVendor\Twilio\Exceptions\TwilioException;
use ShopMagicTwilioVendor\Twilio\ListResource;
use ShopMagicTwilioVendor\Twilio\Options;
use ShopMagicTwilioVendor\Twilio\Values;
use ShopMagicTwilioVendor\Twilio\Version;
use ShopMagicTwilioVendor\Twilio\InstanceContext;
use ShopMagicTwilioVendor\Twilio\Serialize;
use ShopMagicTwilioVendor\Twilio\Rest\Verify\V2\Service\EntityList;
use ShopMagicTwilioVendor\Twilio\Rest\Verify\V2\Service\VerificationCheckList;
use ShopMagicTwilioVendor\Twilio\Rest\Verify\V2\Service\VerificationList;
use ShopMagicTwilioVendor\Twilio\Rest\Verify\V2\Service\AccessTokenList;
use ShopMagicTwilioVendor\Twilio\Rest\Verify\V2\Service\RateLimitList;
use ShopMagicTwilioVendor\Twilio\Rest\Verify\V2\Service\WebhookList;
use ShopMagicTwilioVendor\Twilio\Rest\Verify\V2\Service\MessagingConfigurationList;
/**
 * @property EntityList $entities
 * @property VerificationCheckList $verificationChecks
 * @property VerificationList $verifications
 * @property AccessTokenList $accessTokens
 * @property RateLimitList $rateLimits
 * @property WebhookList $webhooks
 * @property MessagingConfigurationList $messagingConfigurations
 * @method \Twilio\Rest\Verify\V2\Service\VerificationContext verifications(string $sid)
 * @method \Twilio\Rest\Verify\V2\Service\AccessTokenContext accessTokens(string $sid)
 * @method \Twilio\Rest\Verify\V2\Service\WebhookContext webhooks(string $sid)
 * @method \Twilio\Rest\Verify\V2\Service\MessagingConfigurationContext messagingConfigurations(string $country)
 * @method \Twilio\Rest\Verify\V2\Service\EntityContext entities(string $identity)
 * @method \Twilio\Rest\Verify\V2\Service\RateLimitContext rateLimits(string $sid)
 */
class ServiceContext extends \ShopMagicTwilioVendor\Twilio\InstanceContext
{
    protected $_entities;
    protected $_verificationChecks;
    protected $_verifications;
    protected $_accessTokens;
    protected $_rateLimits;
    protected $_webhooks;
    protected $_messagingConfigurations;
    /**
     * Initialize the ServiceContext
     *
     * @param Version $version Version that contains the resource
     * @param string $sid The Twilio-provided string that uniquely identifies the Verification Service resource to delete.
     */
    public function __construct(\ShopMagicTwilioVendor\Twilio\Version $version, $sid)
    {
        parent::__construct($version);
        // Path Solution
        $this->solution = ['sid' => $sid];
        $this->uri = '/Services/' . \rawurlencode($sid) . '';
    }
    /**
     * Delete the ServiceInstance
     *
     * @return bool True if delete succeeds, false otherwise
     * @throws TwilioException When an HTTP error occurs.
     */
    public function delete() : bool
    {
        return $this->version->delete('DELETE', $this->uri);
    }
    /**
     * Fetch the ServiceInstance
     *
     * @return ServiceInstance Fetched ServiceInstance
     * @throws TwilioException When an HTTP error occurs.
     */
    public function fetch() : \ShopMagicTwilioVendor\Twilio\Rest\Verify\V2\ServiceInstance
    {
        $payload = $this->version->fetch('GET', $this->uri);
        return new \ShopMagicTwilioVendor\Twilio\Rest\Verify\V2\ServiceInstance($this->version, $payload, $this->solution['sid']);
    }
    /**
     * Update the ServiceInstance
     *
     * @param array|Options $options Optional Arguments
     * @return ServiceInstance Updated ServiceInstance
     * @throws TwilioException When an HTTP error occurs.
     */
    public function update(array $options = []) : \ShopMagicTwilioVendor\Twilio\Rest\Verify\V2\ServiceInstance
    {
        $options = new \ShopMagicTwilioVendor\Twilio\Values($options);
        $data = \ShopMagicTwilioVendor\Twilio\Values::of(['FriendlyName' => $options['friendlyName'], 'CodeLength' => $options['codeLength'], 'LookupEnabled' => \ShopMagicTwilioVendor\Twilio\Serialize::booleanToString($options['lookupEnabled']), 'SkipSmsToLandlines' => \ShopMagicTwilioVendor\Twilio\Serialize::booleanToString($options['skipSmsToLandlines']), 'DtmfInputRequired' => \ShopMagicTwilioVendor\Twilio\Serialize::booleanToString($options['dtmfInputRequired']), 'TtsName' => $options['ttsName'], 'Psd2Enabled' => \ShopMagicTwilioVendor\Twilio\Serialize::booleanToString($options['psd2Enabled']), 'DoNotShareWarningEnabled' => \ShopMagicTwilioVendor\Twilio\Serialize::booleanToString($options['doNotShareWarningEnabled']), 'CustomCodeEnabled' => \ShopMagicTwilioVendor\Twilio\Serialize::booleanToString($options['customCodeEnabled']), 'Push.IncludeDate' => \ShopMagicTwilioVendor\Twilio\Serialize::booleanToString($options['pushIncludeDate']), 'Push.ApnCredentialSid' => $options['pushApnCredentialSid'], 'Push.FcmCredentialSid' => $options['pushFcmCredentialSid'], 'Totp.Issuer' => $options['totpIssuer'], 'Totp.TimeStep' => $options['totpTimeStep'], 'Totp.CodeLength' => $options['totpCodeLength'], 'Totp.Skew' => $options['totpSkew'], 'DefaultTemplateSid' => $options['defaultTemplateSid']]);
        $payload = $this->version->update('POST', $this->uri, [], $data);
        return new \ShopMagicTwilioVendor\Twilio\Rest\Verify\V2\ServiceInstance($this->version, $payload, $this->solution['sid']);
    }
    /**
     * Access the entities
     */
    protected function getEntities() : \ShopMagicTwilioVendor\Twilio\Rest\Verify\V2\Service\EntityList
    {
        if (!$this->_entities) {
            $this->_entities = new \ShopMagicTwilioVendor\Twilio\Rest\Verify\V2\Service\EntityList($this->version, $this->solution['sid']);
        }
        return $this->_entities;
    }
    /**
     * Access the verificationChecks
     */
    protected function getVerificationChecks() : \ShopMagicTwilioVendor\Twilio\Rest\Verify\V2\Service\VerificationCheckList
    {
        if (!$this->_verificationChecks) {
            $this->_verificationChecks = new \ShopMagicTwilioVendor\Twilio\Rest\Verify\V2\Service\VerificationCheckList($this->version, $this->solution['sid']);
        }
        return $this->_verificationChecks;
    }
    /**
     * Access the verifications
     */
    protected function getVerifications() : \ShopMagicTwilioVendor\Twilio\Rest\Verify\V2\Service\VerificationList
    {
        if (!$this->_verifications) {
            $this->_verifications = new \ShopMagicTwilioVendor\Twilio\Rest\Verify\V2\Service\VerificationList($this->version, $this->solution['sid']);
        }
        return $this->_verifications;
    }
    /**
     * Access the accessTokens
     */
    protected function getAccessTokens() : \ShopMagicTwilioVendor\Twilio\Rest\Verify\V2\Service\AccessTokenList
    {
        if (!$this->_accessTokens) {
            $this->_accessTokens = new \ShopMagicTwilioVendor\Twilio\Rest\Verify\V2\Service\AccessTokenList($this->version, $this->solution['sid']);
        }
        return $this->_accessTokens;
    }
    /**
     * Access the rateLimits
     */
    protected function getRateLimits() : \ShopMagicTwilioVendor\Twilio\Rest\Verify\V2\Service\RateLimitList
    {
        if (!$this->_rateLimits) {
            $this->_rateLimits = new \ShopMagicTwilioVendor\Twilio\Rest\Verify\V2\Service\RateLimitList($this->version, $this->solution['sid']);
        }
        return $this->_rateLimits;
    }
    /**
     * Access the webhooks
     */
    protected function getWebhooks() : \ShopMagicTwilioVendor\Twilio\Rest\Verify\V2\Service\WebhookList
    {
        if (!$this->_webhooks) {
            $this->_webhooks = new \ShopMagicTwilioVendor\Twilio\Rest\Verify\V2\Service\WebhookList($this->version, $this->solution['sid']);
        }
        return $this->_webhooks;
    }
    /**
     * Access the messagingConfigurations
     */
    protected function getMessagingConfigurations() : \ShopMagicTwilioVendor\Twilio\Rest\Verify\V2\Service\MessagingConfigurationList
    {
        if (!$this->_messagingConfigurations) {
            $this->_messagingConfigurations = new \ShopMagicTwilioVendor\Twilio\Rest\Verify\V2\Service\MessagingConfigurationList($this->version, $this->solution['sid']);
        }
        return $this->_messagingConfigurations;
    }
    /**
     * Magic getter to lazy load subresources
     *
     * @param string $name Subresource to return
     * @return ListResource The requested subresource
     * @throws TwilioException For unknown subresources
     */
    public function __get(string $name) : \ShopMagicTwilioVendor\Twilio\ListResource
    {
        if (\property_exists($this, '_' . $name)) {
            $method = 'get' . \ucfirst($name);
            return $this->{$method}();
        }
        throw new \ShopMagicTwilioVendor\Twilio\Exceptions\TwilioException('Unknown subresource ' . $name);
    }
    /**
     * Magic caller to get resource contexts
     *
     * @param string $name Resource to return
     * @param array $arguments Context parameters
     * @return InstanceContext The requested resource context
     * @throws TwilioException For unknown resource
     */
    public function __call(string $name, array $arguments) : \ShopMagicTwilioVendor\Twilio\InstanceContext
    {
        $property = $this->{$name};
        if (\method_exists($property, 'getContext')) {
            return \call_user_func_array(array($property, 'getContext'), $arguments);
        }
        throw new \ShopMagicTwilioVendor\Twilio\Exceptions\TwilioException('Resource does not have a context');
    }
    /**
     * Provide a friendly representation
     *
     * @return string Machine friendly representation
     */
    public function __toString() : string
    {
        $context = [];
        foreach ($this->solution as $key => $value) {
            $context[] = "{$key}={$value}";
        }
        return '[Twilio.Verify.V2.ServiceContext ' . \implode(' ', $context) . ']';
    }
}
