<?php

/**
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
namespace ShopMagicTwilioVendor\Twilio\Rest\Api\V2010;

use ShopMagicTwilioVendor\Twilio\Exceptions\TwilioException;
use ShopMagicTwilioVendor\Twilio\InstanceResource;
use ShopMagicTwilioVendor\Twilio\Options;
use ShopMagicTwilioVendor\Twilio\Values;
use ShopMagicTwilioVendor\Twilio\Version;
use ShopMagicTwilioVendor\Twilio\Deserialize;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\RecordingList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\UsageList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\MessageList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\KeyList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\NewKeyList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\ApplicationList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\IncomingPhoneNumberList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\ConferenceList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\CallList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\OutgoingCallerIdList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\ValidationRequestList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\TranscriptionList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\ConnectAppList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\AuthorizedConnectAppList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\TokenList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\BalanceList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\SipList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\NotificationList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\AvailablePhoneNumberCountryList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\AddressList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\QueueList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\ShortCodeList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\SigningKeyList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\NewSigningKeyList;
/**
 * @property string|null $authToken
 * @property \DateTime|null $dateCreated
 * @property \DateTime|null $dateUpdated
 * @property string|null $friendlyName
 * @property string|null $ownerAccountSid
 * @property string|null $sid
 * @property string $status
 * @property array|null $subresourceUris
 * @property string $type
 * @property string|null $uri
 */
class AccountInstance extends \ShopMagicTwilioVendor\Twilio\InstanceResource
{
    protected $_recordings;
    protected $_usage;
    protected $_messages;
    protected $_keys;
    protected $_newKeys;
    protected $_applications;
    protected $_incomingPhoneNumbers;
    protected $_conferences;
    protected $_calls;
    protected $_outgoingCallerIds;
    protected $_validationRequests;
    protected $_transcriptions;
    protected $_connectApps;
    protected $_authorizedConnectApps;
    protected $_tokens;
    protected $_balance;
    protected $_sip;
    protected $_notifications;
    protected $_availablePhoneNumbers;
    protected $_addresses;
    protected $_queues;
    protected $_shortCodes;
    protected $_signingKeys;
    protected $_newSigningKeys;
    /**
     * Initialize the AccountInstance
     *
     * @param Version $version Version that contains the resource
     * @param mixed[] $payload The response payload
     * @param string $sid The Account Sid that uniquely identifies the account to fetch
     */
    public function __construct(\ShopMagicTwilioVendor\Twilio\Version $version, array $payload, string $sid = null)
    {
        parent::__construct($version);
        // Marshaled Properties
        $this->properties = ['authToken' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'auth_token'), 'dateCreated' => \ShopMagicTwilioVendor\Twilio\Deserialize::dateTime(\ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'date_created')), 'dateUpdated' => \ShopMagicTwilioVendor\Twilio\Deserialize::dateTime(\ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'date_updated')), 'friendlyName' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'friendly_name'), 'ownerAccountSid' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'owner_account_sid'), 'sid' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'sid'), 'status' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'status'), 'subresourceUris' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'subresource_uris'), 'type' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'type'), 'uri' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'uri')];
        $this->solution = ['sid' => $sid ?: $this->properties['sid']];
    }
    /**
     * Generate an instance context for the instance, the context is capable of
     * performing various actions.  All instance actions are proxied to the context
     *
     * @return AccountContext Context for this AccountInstance
     */
    protected function proxy() : \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\AccountContext
    {
        if (!$this->context) {
            $this->context = new \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\AccountContext($this->version, $this->solution['sid']);
        }
        return $this->context;
    }
    /**
     * Fetch the AccountInstance
     *
     * @return AccountInstance Fetched AccountInstance
     * @throws TwilioException When an HTTP error occurs.
     */
    public function fetch() : \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\AccountInstance
    {
        return $this->proxy()->fetch();
    }
    /**
     * Update the AccountInstance
     *
     * @param array|Options $options Optional Arguments
     * @return AccountInstance Updated AccountInstance
     * @throws TwilioException When an HTTP error occurs.
     */
    public function update(array $options = []) : \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\AccountInstance
    {
        return $this->proxy()->update($options);
    }
    /**
     * Access the recordings
     */
    protected function getRecordings() : \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\RecordingList
    {
        return $this->proxy()->recordings;
    }
    /**
     * Access the usage
     */
    protected function getUsage() : \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\UsageList
    {
        return $this->proxy()->usage;
    }
    /**
     * Access the messages
     */
    protected function getMessages() : \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\MessageList
    {
        return $this->proxy()->messages;
    }
    /**
     * Access the keys
     */
    protected function getKeys() : \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\KeyList
    {
        return $this->proxy()->keys;
    }
    /**
     * Access the newKeys
     */
    protected function getNewKeys() : \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\NewKeyList
    {
        return $this->proxy()->newKeys;
    }
    /**
     * Access the applications
     */
    protected function getApplications() : \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\ApplicationList
    {
        return $this->proxy()->applications;
    }
    /**
     * Access the incomingPhoneNumbers
     */
    protected function getIncomingPhoneNumbers() : \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\IncomingPhoneNumberList
    {
        return $this->proxy()->incomingPhoneNumbers;
    }
    /**
     * Access the conferences
     */
    protected function getConferences() : \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\ConferenceList
    {
        return $this->proxy()->conferences;
    }
    /**
     * Access the calls
     */
    protected function getCalls() : \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\CallList
    {
        return $this->proxy()->calls;
    }
    /**
     * Access the outgoingCallerIds
     */
    protected function getOutgoingCallerIds() : \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\OutgoingCallerIdList
    {
        return $this->proxy()->outgoingCallerIds;
    }
    /**
     * Access the validationRequests
     */
    protected function getValidationRequests() : \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\ValidationRequestList
    {
        return $this->proxy()->validationRequests;
    }
    /**
     * Access the transcriptions
     */
    protected function getTranscriptions() : \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\TranscriptionList
    {
        return $this->proxy()->transcriptions;
    }
    /**
     * Access the connectApps
     */
    protected function getConnectApps() : \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\ConnectAppList
    {
        return $this->proxy()->connectApps;
    }
    /**
     * Access the authorizedConnectApps
     */
    protected function getAuthorizedConnectApps() : \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\AuthorizedConnectAppList
    {
        return $this->proxy()->authorizedConnectApps;
    }
    /**
     * Access the tokens
     */
    protected function getTokens() : \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\TokenList
    {
        return $this->proxy()->tokens;
    }
    /**
     * Access the balance
     */
    protected function getBalance() : \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\BalanceList
    {
        return $this->proxy()->balance;
    }
    /**
     * Access the sip
     */
    protected function getSip() : \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\SipList
    {
        return $this->proxy()->sip;
    }
    /**
     * Access the notifications
     */
    protected function getNotifications() : \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\NotificationList
    {
        return $this->proxy()->notifications;
    }
    /**
     * Access the availablePhoneNumbers
     */
    protected function getAvailablePhoneNumbers() : \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\AvailablePhoneNumberCountryList
    {
        return $this->proxy()->availablePhoneNumbers;
    }
    /**
     * Access the addresses
     */
    protected function getAddresses() : \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\AddressList
    {
        return $this->proxy()->addresses;
    }
    /**
     * Access the queues
     */
    protected function getQueues() : \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\QueueList
    {
        return $this->proxy()->queues;
    }
    /**
     * Access the shortCodes
     */
    protected function getShortCodes() : \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\ShortCodeList
    {
        return $this->proxy()->shortCodes;
    }
    /**
     * Access the signingKeys
     */
    protected function getSigningKeys() : \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\SigningKeyList
    {
        return $this->proxy()->signingKeys;
    }
    /**
     * Access the newSigningKeys
     */
    protected function getNewSigningKeys() : \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\NewSigningKeyList
    {
        return $this->proxy()->newSigningKeys;
    }
    /**
     * Magic getter to access properties
     *
     * @param string $name Property to access
     * @return mixed The requested property
     * @throws TwilioException For unknown properties
     */
    public function __get(string $name)
    {
        if (\array_key_exists($name, $this->properties)) {
            return $this->properties[$name];
        }
        if (\property_exists($this, '_' . $name)) {
            $method = 'get' . \ucfirst($name);
            return $this->{$method}();
        }
        throw new \ShopMagicTwilioVendor\Twilio\Exceptions\TwilioException('Unknown property: ' . $name);
    }
    /**
     * Provide a friendly representation
     *
     * @return string Machine friendly representation
     */
    public function __toString() : string
    {
        $context = [];
        foreach ($this->solution as $key => $value) {
            $context[] = "{$key}={$value}";
        }
        return '[Twilio.Api.V2010.AccountInstance ' . \implode(' ', $context) . ']';
    }
}
