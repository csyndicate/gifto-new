{"version":3,"sources":["grid-layout.js"],"names":["$","MinimogGridPlugin","$el","options","$grid","this","find","_isotopeOptions","itemSelector","percentPosition","transitionDuration","packery","columnWidth","fitRows","gutter","triggerMethod","method","init","resizeTimer","observer","plugin","settings","data","length","type","$minimog","isRTL","originLeft","layoutMode","fn","laziestloader","$llImages","each","push","isImageLoaded","Promise","all","then","calculateMasonrySize","imagesLoaded","one","handlerEntranceAnimation","window","on","clearTimeout","setTimeout","addClass","event","el","$items","update","initAndTrackLazyImage","$image","unwrap","trigger","res","rej","isotope","append","always","updateLayout","disableColumnChange","parseNumberValue","setting","default_value","undefined","isNaN","parseInt","windowWidth","gridWidth","gutterDesktop","gutterLaptop","gutterTabletExtra","gutterTablet","gutterMobileExtra","gutterMobile","columnsDesktop","columnsLaptop","columnsTabletExtra","columnsTablet","columnsMobileExtra","columnsMobile","zigzagHeightDesktop","zigzagHeightLaptop","zigzagHeightTabletExtra","zigzagHeightTablet","zigzagHeightMobileExtra","zigzagHeightMobile","zigzagReversed","alternatingColumnWidth","columnAlternatingDesktop","columnAlternatingWideScreen","columnAlternatingLaptop","columnAlternatingTabletExtra","columnAlternatingTablet","columnAlternatingMobileExtra","columnAlternatingMobile","laptopBreakPoint","tabletExtraBreakPoint","tabletBreakPoint","mobileExtraBreakPoint","mobileBreakPoint","oldActiveColumns","columnWidth2","realWidth","columnHeight","columnHeight2","columnHeight7","columnHeight13","isMetro","ratioH","alternatingLoopCount","alternatingReversed","totalAlternatingColumns","totalAlternatingFlowColumns","isAlternatingColumn","innerWidth","getBoundingClientRect","width","gutterWideScreen","columns","columnsWideScreen","zigzagHeight","zigzagHeightWideScreen","columnAlternating","wideScreenBreakPoint","elementorFrontendConfig","elementorBreakpoints","responsive","breakpoints","widescreen","value","laptop","tablet_extra","tablet","mobile_extra","mobile","activeColumns","activeGutter","activeZigzagHeight","activeAlternatingColumns","document","body","attr","Math","floor","css","children","ratio","index","gridItem","marginTop","height","marginBottom","$itemHeight","hasClass","matchHeight","elementorWaypoint","_self","element","destroy","offset","namespace","extend","MinimogGridLayout","args","get","let","instance","jQuery"],"mappings":"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","file":"../../grid-layout.min.js","sourcesContent":["(function( $ ) {\n\t\t'use strict';\n\n\t\tvar MinimogGridPlugin = function( $el, options ) {\n\t\t\tthis.$el  = $el;\n\t\t\tvar $grid = $el.find( '.minimog-grid' );\n\n\t\t\tvar disableColumnChange      = false;\n\t\t\tvar activeColumns            = 1,\n\t\t\t    activeGutter             = 0,\n\t\t\t    activeZigzagHeight       = 0,\n\t\t\t    activeAlternatingColumns = 0; // 0 to Disable, 1 to Enable, -1 to Enable & Reversed.\n\n\t\t\tthis._isotopeOptions = {\n\t\t\t\titemSelector: '.grid-item',\n\t\t\t\tpercentPosition: true,\n\t\t\t\ttransitionDuration: 0,\n\t\t\t\tpackery: {\n\t\t\t\t\tcolumnWidth: '.grid-sizer',\n\t\t\t\t},\n\t\t\t\tfitRows: {\n\t\t\t\t\tgutter: 10\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// jQuery methods.\n\t\t\tthis.triggerMethod = ( method, options ) => {\n\t\t\t\tif ( typeof this[method] === 'function' ) {\n\t\t\t\t\tthis[method]( options );\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.init = function() {\n\t\t\t\tvar plugin = this;\n\t\t\t\tvar resizeTimer;\n\n\t\t\t\tvar settings = $el.data( 'grid' );\n\n\t\t\t\tif ( $grid.length > 0 && settings && typeof settings.type !== 'undefined' ) {\n\t\t\t\t\tif ( $minimog.isRTL ) {\n\t\t\t\t\t\tplugin._isotopeOptions.originLeft = false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( 'masonry' === settings.type || 'metro' === settings.type ) {\n\t\t\t\t\t\tplugin._isotopeOptions.layoutMode = 'packery';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tplugin._isotopeOptions.layoutMode = 'fitRows';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( $.fn.laziestloader ) {\n\t\t\t\t\t\tvar $llImages = $grid.find( '.ll-image' ),\n\t\t\t\t\t\t\tobserver = [];\n\n\t\t\t\t\t\tif ( $llImages.length > 0 ) {\n\t\t\t\t\t\t\t$llImages.each(function() {\n\t\t\t\t\t\t\t\tobserver.push( plugin.isImageLoaded( $(this) ) );\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tPromise.all( observer ).then( ( values ) => {\n\t\t\t\t\t\t\t\tplugin.calculateMasonrySize();\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if ( $.fn.imagesLoaded ) {\n\t\t\t\t\t\t$grid.imagesLoaded( function() {\n\t\t\t\t\t\t\tplugin.calculateMasonrySize();\n\t\t\t\t\t\t} );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tplugin.calculateMasonrySize();\n\t\t\t\t\t}\n\n\t\t\t\t\t$grid.one( 'arrangeComplete', function() {\n\t\t\t\t\t\tplugin.handlerEntranceAnimation();\n\t\t\t\t\t} );\n\n\t\t\t\t\t$( window ).on( 'hresize', function() {\n\t\t\t\t\t\tplugin.calculateMasonrySize();\n\n\t\t\t\t\t\t// Sometimes layout can be overlap. then re-cal layout one time.\n\t\t\t\t\t\tclearTimeout( resizeTimer );\n\t\t\t\t\t\tresizeTimer = setTimeout( function() {\n\t\t\t\t\t\t\t// Run code here, resizing has \"stopped\"\n\t\t\t\t\t\t\tplugin.calculateMasonrySize();\n\t\t\t\t\t\t}, 500 ); // DO NOT decrease the time. Sometime, It'll make layout overlay on resize.\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\t\t\t\t\t$grid.addClass( 'loaded' );\n\t\t\t\t\tplugin.handlerEntranceAnimation();\n\t\t\t\t}\n\n\t\t\t\t$el.on( 'MinimogQueryEnd', function( event, el, $items ) {\n\t\t\t\t\tplugin.update( $items );\n\t\t\t\t} );\n\t\t\t};\n\n\t\t\tthis.initAndTrackLazyImage = function( $image ) {\n\t\t\t\t$image.laziestloader( {}, function() {\n\t\t\t\t\t$( this ).unwrap( '.minimog-lazy-image' );\n\t\t\t\t} ).trigger( 'laziestloader' );\n\n\t\t\t\treturn this.isImageLoaded( $image );\n\t\t\t}\n\n\t\t\tthis.isImageLoaded = function( $image ) {\n\t\t\t\treturn new Promise( ( res, rej ) => {\n\t\t\t\t\t$image.on( 'loaded', function() {\n\t\t\t\t\t\treturn res('This image loaded');\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tthis.update = function( $items ) {\n\t\t\t\tvar plugin   = this,\n\t\t\t\t\tsettings = $el.data( 'grid' ),\n\t\t\t\t\tobserver = [];\n\n\t\t\t\tif ( $.fn.laziestloader ) {\n\t\t\t\t\tvar $llImages = $items.find( '.ll-image' );\n\n\t\t\t\t\tif ( $llImages.length > 0 ) {\n\t\t\t\t\t\t$llImages.each(function() {\n\t\t\t\t\t\t\tobserver.push( plugin.initAndTrackLazyImage( $(this) ) );\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( $grid.length > 0 && settings && typeof settings.type !== 'undefined' ) {\n\t\t\t\t\t$grid.isotope().append( $items ).isotope( 'reloadItems', $items );\n\n\t\t\t\t\tif ( $.fn.imagesLoaded ) {\n\t\t\t\t\t\tplugin.calculateMasonrySize();\n\n\t\t\t\t\t\t$grid.imagesLoaded().always( function() {\n\t\t\t\t\t\t\t$items.addClass( 'animate' );\n\t\t\t\t\t\t\tplugin.calculateMasonrySize();\n\t\t\t\t\t\t} );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$items.addClass( 'animate' );\n\t\t\t\t\t\tplugin.calculateMasonrySize();\n\n\t\t\t\t\t\tPromise.all( observer ).then( ( values ) => {\n\t\t\t\t\t\t\tplugin.calculateMasonrySize();\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$grid.append( $items );\n\t\t\t\t\tif ( $.fn.imagesLoaded ) {\n\t\t\t\t\t\t$grid.imagesLoaded().always( function() {\n\t\t\t\t\t\t\t$items.addClass( 'animate' );\n\t\t\t\t\t\t} );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$items.addClass( 'animate' );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.updateLayout = function( options = {} ) {\n\t\t\t\tvar plugin = this;\n\n\t\t\t\tplugin.disableColumnChange = true === options.disableColumnChange;\n\n\t\t\t\tplugin.calculateMasonrySize( options );\n\t\t\t};\n\n\t\t\tthis.parseNumberValue = function( setting = '', default_value = '' ) {\n\t\t\t\tif ( undefined === setting || '' === setting || isNaN( setting ) ) {\n\t\t\t\t\treturn default_value;\n\t\t\t\t}\n\n\t\t\t\treturn parseInt( setting );\n\t\t\t};\n\n\t\t\tthis.calculateMasonrySize = function( options = {} ) {\n\t\t\t\tvar plugin   = this,\n\t\t\t\t    settings = $el.data( 'grid' );\n\n\t\t\t\tif ( ! settings ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar windowWidth             = window.innerWidth,\n\t\t\t\t    gridWidth               = $grid[0].getBoundingClientRect().width,\n\n\t\t\t\t    gutterDesktop           = this.parseNumberValue( settings.gutter, 0 ),\n\t\t\t\t    gutterWideScreen        = this.parseNumberValue( settings.gutterWideScreen, gutterDesktop ),\n\t\t\t\t    gutterLaptop            = this.parseNumberValue( settings.gutterLaptop, gutterDesktop ),\n\t\t\t\t    gutterTabletExtra       = this.parseNumberValue( settings.gutterTabletExtra, gutterLaptop ),\n\t\t\t\t    gutterTablet            = this.parseNumberValue( settings.gutterTablet, gutterTabletExtra ),\n\t\t\t\t    gutterMobileExtra       = this.parseNumberValue( settings.gutterMobileExtra, gutterTablet ),\n\t\t\t\t    gutterMobile            = this.parseNumberValue( settings.gutterMobile, gutterMobileExtra ),\n\t\t\t\t    columnsDesktop          = this.parseNumberValue( settings.columns, 1 ),\n\t\t\t\t    columnsWideScreen       = this.parseNumberValue( settings.columnsWideScreen, columnsDesktop ),\n\t\t\t\t    columnsLaptop           = this.parseNumberValue( settings.columnsLaptop, columnsDesktop ),\n\t\t\t\t    columnsTabletExtra      = this.parseNumberValue( settings.columnsTabletExtra, columnsLaptop ),\n\t\t\t\t    columnsTablet           = this.parseNumberValue( settings.columnsTablet, columnsTabletExtra ),\n\t\t\t\t    columnsMobileExtra      = this.parseNumberValue( settings.columnsMobileExtra, columnsTablet ),\n\t\t\t\t    columnsMobile           = this.parseNumberValue( settings.columnsMobile, columnsMobileExtra ),\n\t\t\t\t    zigzagHeightDesktop     = this.parseNumberValue( settings.zigzagHeight, 0 ),\n\t\t\t\t    zigzagHeightWideScreen  = this.parseNumberValue( settings.zigzagHeightWideScreen, zigzagHeightDesktop ),\n\t\t\t\t    zigzagHeightLaptop      = this.parseNumberValue( settings.zigzagHeightLaptop, zigzagHeightDesktop ),\n\t\t\t\t    zigzagHeightTabletExtra = this.parseNumberValue( settings.zigzagHeightTabletExtra, zigzagHeightLaptop ),\n\t\t\t\t    zigzagHeightTablet      = this.parseNumberValue( settings.zigzagHeightTablet, zigzagHeightTabletExtra ),\n\t\t\t\t    zigzagHeightMobileExtra = this.parseNumberValue( settings.zigzagHeightMobileExtra, zigzagHeightTablet ),\n\t\t\t\t    zigzagHeightMobile      = this.parseNumberValue( settings.zigzagHeightMobile, zigzagHeightMobileExtra ),\n\t\t\t\t    zigzagReversed          = settings.zigzagReversed !== undefined && settings.zigzagReversed === 1 ? true : false;\n\n\t\t\t\tvar alternatingColumnWidth       = 0,\n\t\t\t\t    columnAlternatingDesktop     = this.parseNumberValue( settings.columnAlternating, 0 ),\n\t\t\t\t    columnAlternatingWideScreen  = this.parseNumberValue( settings.columnAlternatingWideScreen, columnAlternatingDesktop ),\n\t\t\t\t    columnAlternatingLaptop      = this.parseNumberValue( settings.columnAlternatingLaptop, columnAlternatingDesktop ),\n\t\t\t\t    columnAlternatingTabletExtra = this.parseNumberValue( settings.columnAlternatingTabletExtra, columnAlternatingLaptop ),\n\t\t\t\t    columnAlternatingTablet      = this.parseNumberValue( settings.columnAlternatingTablet, columnAlternatingTabletExtra ),\n\t\t\t\t    columnAlternatingMobileExtra = this.parseNumberValue( settings.columnAlternatingMobileExtra, columnAlternatingTablet ),\n\t\t\t\t    columnAlternatingMobile      = this.parseNumberValue( settings.columnAlternatingMobile, columnAlternatingMobileExtra );\n\n\t\t\t\tvar wideScreenBreakPoint  = 1600;\n\t\t\t\tvar laptopBreakPoint      = 1200;\n\t\t\t\tvar tabletExtraBreakPoint = 992;\n\t\t\t\tvar tabletBreakPoint      = 768;\n\t\t\t\tvar mobileExtraBreakPoint = 576;\n\t\t\t\tvar mobileBreakPoint      = 360;\n\n\t\t\t\tif ( typeof elementorFrontendConfig !== 'undefined' ) {\n\t\t\t\t\tvar elementorBreakpoints = elementorFrontendConfig.responsive.breakpoints;\n\n\t\t\t\t\twideScreenBreakPoint  =\n\t\t\t\t\t\tthis.parseNumberValue( elementorBreakpoints.widescreen.value, wideScreenBreakPoint );\n\t\t\t\t\tlaptopBreakPoint      =\n\t\t\t\t\t\tthis.parseNumberValue( elementorBreakpoints.laptop.value, laptopBreakPoint );\n\t\t\t\t\ttabletExtraBreakPoint =\n\t\t\t\t\t\tthis.parseNumberValue( elementorBreakpoints.tablet_extra.value, tabletExtraBreakPoint );\n\t\t\t\t\ttabletBreakPoint      =\n\t\t\t\t\t\tthis.parseNumberValue( elementorBreakpoints.tablet.value, tabletBreakPoint );\n\t\t\t\t\tmobileExtraBreakPoint =\n\t\t\t\t\t\tthis.parseNumberValue( elementorBreakpoints.mobile_extra.value, mobileBreakPoint );\n\t\t\t\t\tmobileBreakPoint      =\n\t\t\t\t\t\tthis.parseNumberValue( elementorBreakpoints.mobile.value, mobileBreakPoint );\n\t\t\t\t}\n\n\t\t\t\tvar oldActiveColumns = plugin.activeColumns;\n\n\t\t\t\tif ( ! plugin.disableColumnChange ) {\n\t\t\t\t\tif ( windowWidth >= wideScreenBreakPoint ) { // Use >= Because from up\n\t\t\t\t\t\tplugin.activeColumns            = columnsWideScreen;\n\t\t\t\t\t\tplugin.activeGutter             = gutterWideScreen;\n\t\t\t\t\t\tplugin.activeZigzagHeight       = zigzagHeightWideScreen;\n\t\t\t\t\t\tplugin.activeAlternatingColumns = columnAlternatingWideScreen;\n\t\t\t\t\t} else if ( windowWidth > laptopBreakPoint ) {\n\t\t\t\t\t\tplugin.activeColumns            = columnsDesktop;\n\t\t\t\t\t\tplugin.activeGutter             = gutterDesktop;\n\t\t\t\t\t\tplugin.activeZigzagHeight       = zigzagHeightDesktop;\n\t\t\t\t\t\tplugin.activeAlternatingColumns = columnAlternatingDesktop;\n\t\t\t\t\t} else if ( windowWidth > tabletExtraBreakPoint ) {\n\t\t\t\t\t\tplugin.activeColumns            = columnsLaptop;\n\t\t\t\t\t\tplugin.activeGutter             = gutterLaptop;\n\t\t\t\t\t\tplugin.activeZigzagHeight       = zigzagHeightLaptop;\n\t\t\t\t\t\tplugin.activeAlternatingColumns = columnAlternatingLaptop;\n\t\t\t\t\t} else if ( windowWidth > tabletBreakPoint ) {\n\t\t\t\t\t\tplugin.activeColumns            = columnsTabletExtra;\n\t\t\t\t\t\tplugin.activeGutter             = gutterTabletExtra;\n\t\t\t\t\t\tplugin.activeZigzagHeight       = zigzagHeightTabletExtra;\n\t\t\t\t\t\tplugin.activeAlternatingColumns = columnAlternatingTabletExtra;\n\t\t\t\t\t} else if ( windowWidth > mobileExtraBreakPoint ) {\n\t\t\t\t\t\tplugin.activeColumns            = columnsTablet;\n\t\t\t\t\t\tplugin.activeGutter             = gutterTablet;\n\t\t\t\t\t\tplugin.activeZigzagHeight       = zigzagHeightTablet;\n\t\t\t\t\t\tplugin.activeAlternatingColumns = columnAlternatingTablet;\n\t\t\t\t\t} else if ( windowWidth > mobileBreakPoint ) {\n\t\t\t\t\t\tplugin.activeColumns            = columnsMobileExtra;\n\t\t\t\t\t\tplugin.activeGutter             = gutterMobileExtra;\n\t\t\t\t\t\tplugin.activeZigzagHeight       = zigzagHeightMobileExtra;\n\t\t\t\t\t\tplugin.activeAlternatingColumns = columnAlternatingMobileExtra;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tplugin.activeColumns            = columnsMobile;\n\t\t\t\t\t\tplugin.activeGutter             = gutterMobile;\n\t\t\t\t\t\tplugin.activeZigzagHeight       = zigzagHeightMobile;\n\t\t\t\t\t\tplugin.activeAlternatingColumns = columnAlternatingMobile;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * Override Columns.\n\t\t\t\t */\n\t\t\t\tif ( typeof options.columns !== 'undefined' ) {\n\t\t\t\t\tplugin.activeColumns = options.columns;\n\t\t\t\t}\n\n\t\t\t\tif ( oldActiveColumns !== plugin.activeColumns ) {\n\t\t\t\t\t$( document.body ).trigger( 'MinimogGridLayoutColumnsChange', [\n\t\t\t\t\t\t$el, oldActiveColumns, plugin.activeColumns\n\t\t\t\t\t] );\n\t\t\t\t}\n\n\t\t\t\t$el.attr( 'data-active-columns', plugin.activeColumns );\n\n\t\t\t\tvar totalGutterPerRow = (plugin.activeColumns - 1) * plugin.activeGutter;\n\n\t\t\t\tvar columnWidth = (gridWidth - totalGutterPerRow) / plugin.activeColumns;\n\n\t\t\t\tcolumnWidth = Math.floor( columnWidth );\n\n\t\t\t\tvar columnWidth2 = columnWidth;\n\t\t\t\tif ( plugin.activeColumns > 1 ) {\n\t\t\t\t\tcolumnWidth2 = columnWidth * 2 + plugin.activeGutter;\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * Used this css var for layout grid border around\n\t\t\t\t */\n\t\t\t\tvar realWidth = columnWidth * plugin.activeColumns + plugin.activeGutter * (plugin.activeColumns - 1);\n\t\t\t\t$el.css( '--grid-real-width', realWidth + 'px' );\n\n\t\t\t\t$grid.children( '.grid-sizer' ).css( {\n\t\t\t\t\t'width': columnWidth + 'px'\n\t\t\t\t} );\n\n\t\t\t\tvar columnHeight   = 0,\n\t\t\t\t    columnHeight2  = 0, // 200%.\n\t\t\t\t    columnHeight7  = 0, // 70%.\n\t\t\t\t    columnHeight13 = 0, // 130%.\n\t\t\t\t    isMetro        = false,\n\t\t\t\t    ratioW         = 1,\n\t\t\t\t    ratioH         = 1;\n\n\t\t\t\tif ( settings.ratio ) {\n\t\t\t\t\tratioH  = settings.ratio;\n\t\t\t\t\tisMetro = true;\n\t\t\t\t}\n\n\t\t\t\t// Calculate item height for only metro type.\n\t\t\t\tif ( isMetro ) {\n\t\t\t\t\tcolumnHeight = columnWidth * ratioH / ratioW;\n\t\t\t\t\tcolumnHeight = Math.floor( columnHeight );\n\n\t\t\t\t\tif ( plugin.activeColumns > 1 ) {\n\t\t\t\t\t\tcolumnHeight2  = columnHeight * 2 + plugin.activeGutter;\n\t\t\t\t\t\tcolumnHeight13 = parseInt( columnHeight * 1.3 );\n\t\t\t\t\t\tcolumnHeight7  = columnHeight2 - plugin.activeGutter - columnHeight13;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcolumnHeight2 = columnHeight7 = columnHeight13 = columnHeight;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar alternatingLoopCount        = 0;\n\t\t\t\tvar alternatingReversed         = plugin.activeAlternatingColumns < 0 ? true : false;\n\t\t\t\tvar totalAlternatingColumns     = alternatingReversed ? plugin.activeColumns - 1 : plugin.activeColumns + 1;\n\t\t\t\tvar totalAlternatingFlowColumns = plugin.activeColumns + totalAlternatingColumns; // Normal columns + alternating columns.\n\t\t\t\tvar isAlternatingColumn         = false;\n\n\t\t\t\tif ( plugin.activeAlternatingColumns ) {\n\t\t\t\t\tif ( alternatingReversed ) {\n\t\t\t\t\t\talternatingColumnWidth =\n\t\t\t\t\t\t\t(gridWidth - (totalAlternatingColumns - 1) * plugin.activeGutter) / totalAlternatingColumns;\n\t\t\t\t\t} else {\n\t\t\t\t\t\talternatingColumnWidth =\n\t\t\t\t\t\t\t(gridWidth - plugin.activeColumns * plugin.activeGutter) / (plugin.activeColumns + 1);\n\t\t\t\t\t}\n\n\t\t\t\t\talternatingColumnWidth = Math.floor( alternatingColumnWidth );\n\t\t\t\t}\n\n\t\t\t\t$grid.children( '.grid-item' ).each( function( index ) {\n\t\t\t\t\tvar gridItem = $( this );\n\t\t\t\t\talternatingLoopCount ++;\n\n\t\t\t\t\tif ( alternatingLoopCount > plugin.activeColumns ) {\n\t\t\t\t\t\tisAlternatingColumn = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Zigzag.\n\t\t\t\t\tif ( plugin.activeZigzagHeight > 0 // Has zigzag.\n\t\t\t\t\t     && plugin.activeColumns > 1 // More than 1 column.\n\t\t\t\t\t     && index + 1 <= plugin.activeColumns // On top items.\n\t\t\t\t\t) {\n\t\t\t\t\t\tif ( zigzagReversed === false ) { // Is odd item.\n\t\t\t\t\t\t\tif ( index % 2 === 0 ) {\n\t\t\t\t\t\t\t\tgridItem.css( {\n\t\t\t\t\t\t\t\t\t'marginTop': plugin.activeZigzagHeight + 'px'\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tgridItem.css( {\n\t\t\t\t\t\t\t\t\t'marginTop': '0px'\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif ( index % 2 !== 0 ) {\n\t\t\t\t\t\t\t\tgridItem.css( {\n\t\t\t\t\t\t\t\t\t'marginTop': plugin.activeZigzagHeight + 'px'\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tgridItem.css( {\n\t\t\t\t\t\t\t\t\t'marginTop': '0px'\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgridItem.css( {\n\t\t\t\t\t\t\t'marginTop': '0px'\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( plugin.activeAlternatingColumns && isAlternatingColumn ) {\n\t\t\t\t\t\tgridItem.css( {\n\t\t\t\t\t\t\t'width': alternatingColumnWidth + 'px',\n\t\t\t\t\t\t\t'height': 'auto',\n\t\t\t\t\t\t} );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif ( gridItem.data( 'width' ) === 2 ) {\n\t\t\t\t\t\t\tgridItem.css( {\n\t\t\t\t\t\t\t\t'width': columnWidth2 + 'px',\n\t\t\t\t\t\t\t\t'height': 'auto',\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tgridItem.css( {\n\t\t\t\t\t\t\t\t'width': columnWidth + 'px',\n\t\t\t\t\t\t\t\t'height': 'auto',\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( 'grid' === settings.type ) {\n\t\t\t\t\t\tgridItem.css( {\n\t\t\t\t\t\t\t'marginBottom': plugin.activeGutter + 'px'\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( isMetro ) {\n\t\t\t\t\t\tvar $itemHeight;\n\n\t\t\t\t\t\tif ( gridItem.hasClass( 'grid-item-height' ) ) {\n\t\t\t\t\t\t\t$itemHeight = gridItem;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$itemHeight = gridItem.find( '.grid-item-height' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( gridItem.data( 'height' ) === 2 ) {\n\t\t\t\t\t\t\t$itemHeight.css( {\n\t\t\t\t\t\t\t\t'height': columnHeight2 + 'px'\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} else if ( gridItem.data( 'height' ) === 1.3 ) {\n\t\t\t\t\t\t\t$itemHeight.css( {\n\t\t\t\t\t\t\t\t'height': columnHeight13 + 'px'\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} else if ( gridItem.data( 'height' ) === 0.7 ) {\n\t\t\t\t\t\t\t$itemHeight.css( {\n\t\t\t\t\t\t\t\t'height': columnHeight7 + 'px'\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$itemHeight.css( {\n\t\t\t\t\t\t\t\t'height': columnHeight + 'px'\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tisAlternatingColumn = false;\n\t\t\t\t\tif ( alternatingLoopCount % totalAlternatingFlowColumns === 0 ) {\n\t\t\t\t\t\talternatingLoopCount = 0; // Reset to next alternating row.\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tif ( plugin._isotopeOptions ) {\n\t\t\t\t\t$grid.addClass( 'loaded' );\n\t\t\t\t\tplugin._isotopeOptions.packery.gutter = plugin.activeGutter;\n\t\t\t\t\tplugin._isotopeOptions.fitRows.gutter = plugin.activeGutter;\n\t\t\t\t\t$grid.isotope( plugin._isotopeOptions );\n\t\t\t\t}\n\n\t\t\t\t// Run after isotope function to fix overlap layout.\n\t\t\t\tif ( 'grid' === settings.type ) {\n\t\t\t\t\t$grid.children( '.grid-item' ).matchHeight();\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * Delay 250 to fix layout overlap when toggle columns.\n\t\t\t\t */\n\t\t\t\tsetTimeout( function() {\n\t\t\t\t\t$grid.isotope( 'layout' );\n\t\t\t\t\tif ( $grid.hasClass( 'has-animation' ) ) {\n\t\t\t\t\t\t$grid.children( '.grid-item' ).addClass( 'animate' );\n\t\t\t\t\t}\n\n\t\t\t\t\t$el.trigger( 'MinimogGridLayoutResized' );\n\t\t\t\t}, 250 );\n\t\t\t};\n\n\t\t\tthis.handlerEntranceAnimation = function() {\n\t\t\t\tif ( ! $grid.hasClass( 'has-animation' ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Used find() for flex layout.\n\t\t\t\tvar items = $grid.find( '.grid-item' );\n\n\t\t\t\titems.elementorWaypoint( function() {\n\t\t\t\t\t// Fix for different ver of waypoints plugin.\n\t\t\t\t\tvar _self = this.element ? this.element : this;\n\t\t\t\t\tvar $self = $( _self );\n\t\t\t\t\t$self.addClass( 'animate' );\n\t\t\t\t\tthis.destroy(); // trigger once.\n\t\t\t\t}, {\n\t\t\t\t\toffset: '90%'\n\t\t\t\t} );\n\t\t\t};\n\n\t\t\tthis.init();\n\t\t};\n\n\t\tconst namespace = 'minimogGridLayout';\n\n\t\t$.fn.extend( {\n\t\t\tMinimogGridLayout: function( args, update ) {\n\t\t\t\t// Check if selected element exist.\n\t\t\t\tif ( ! this.length ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t\t// We need to return options.\n\t\t\t\tif ( args === 'options' ) {\n\t\t\t\t\treturn $.data( this.get( 0 ), namespace ).options();\n\t\t\t\t}\n\n\t\t\t\treturn this.each( function() {\n\t\t\t\t\tvar $el = $( this );\n\n\t\t\t\t\tlet instance = $.data( this, namespace );\n\n\t\t\t\t\tif ( instance ) { // Already created then trigger method.\n\t\t\t\t\t\tinstance.triggerMethod( args, update );\n\t\t\t\t\t} else { // Create new instance.\n\t\t\t\t\t\tinstance = new MinimogGridPlugin( $el, args );\n\t\t\t\t\t\t$.data( this, namespace, instance );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t}( jQuery ));\n"]}