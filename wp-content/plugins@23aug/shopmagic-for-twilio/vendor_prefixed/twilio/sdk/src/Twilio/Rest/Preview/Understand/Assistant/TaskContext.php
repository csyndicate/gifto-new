<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */
namespace ShopMagicTwilioVendor\Twilio\Rest\Preview\Understand\Assistant;

use ShopMagicTwilioVendor\Twilio\Exceptions\TwilioException;
use ShopMagicTwilioVendor\Twilio\InstanceContext;
use ShopMagicTwilioVendor\Twilio\Options;
use ShopMagicTwilioVendor\Twilio\Rest\Preview\Understand\Assistant\Task\FieldList;
use ShopMagicTwilioVendor\Twilio\Rest\Preview\Understand\Assistant\Task\SampleList;
use ShopMagicTwilioVendor\Twilio\Rest\Preview\Understand\Assistant\Task\TaskActionsList;
use ShopMagicTwilioVendor\Twilio\Rest\Preview\Understand\Assistant\Task\TaskStatisticsList;
use ShopMagicTwilioVendor\Twilio\Serialize;
use ShopMagicTwilioVendor\Twilio\Values;
use ShopMagicTwilioVendor\Twilio\Version;
/**
 * PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
 *
 * @property \Twilio\Rest\Preview\Understand\Assistant\Task\FieldList $fields
 * @property \Twilio\Rest\Preview\Understand\Assistant\Task\SampleList $samples
 * @property \Twilio\Rest\Preview\Understand\Assistant\Task\TaskActionsList $taskActions
 * @property \Twilio\Rest\Preview\Understand\Assistant\Task\TaskStatisticsList $statistics
 * @method \Twilio\Rest\Preview\Understand\Assistant\Task\FieldContext fields(string $sid)
 * @method \Twilio\Rest\Preview\Understand\Assistant\Task\SampleContext samples(string $sid)
 * @method \Twilio\Rest\Preview\Understand\Assistant\Task\TaskActionsContext taskActions()
 * @method \Twilio\Rest\Preview\Understand\Assistant\Task\TaskStatisticsContext statistics()
 */
class TaskContext extends \ShopMagicTwilioVendor\Twilio\InstanceContext
{
    protected $_fields = null;
    protected $_samples = null;
    protected $_taskActions = null;
    protected $_statistics = null;
    /**
     * Initialize the TaskContext
     *
     * @param \Twilio\Version $version Version that contains the resource
     * @param string $assistantSid The unique ID of the Assistant.
     * @param string $sid A 34 character string that uniquely identifies this
     *                    resource.
     * @return \Twilio\Rest\Preview\Understand\Assistant\TaskContext
     */
    public function __construct(\ShopMagicTwilioVendor\Twilio\Version $version, $assistantSid, $sid)
    {
        parent::__construct($version);
        // Path Solution
        $this->solution = array('assistantSid' => $assistantSid, 'sid' => $sid);
        $this->uri = '/Assistants/' . \rawurlencode($assistantSid) . '/Tasks/' . \rawurlencode($sid) . '';
    }
    /**
     * Fetch a TaskInstance
     *
     * @return TaskInstance Fetched TaskInstance
     * @throws TwilioException When an HTTP error occurs.
     */
    public function fetch()
    {
        $params = \ShopMagicTwilioVendor\Twilio\Values::of(array());
        $payload = $this->version->fetch('GET', $this->uri, $params);
        return new \ShopMagicTwilioVendor\Twilio\Rest\Preview\Understand\Assistant\TaskInstance($this->version, $payload, $this->solution['assistantSid'], $this->solution['sid']);
    }
    /**
     * Update the TaskInstance
     *
     * @param array|Options $options Optional Arguments
     * @return TaskInstance Updated TaskInstance
     * @throws TwilioException When an HTTP error occurs.
     */
    public function update($options = array())
    {
        $options = new \ShopMagicTwilioVendor\Twilio\Values($options);
        $data = \ShopMagicTwilioVendor\Twilio\Values::of(array('FriendlyName' => $options['friendlyName'], 'UniqueName' => $options['uniqueName'], 'Actions' => \ShopMagicTwilioVendor\Twilio\Serialize::jsonObject($options['actions']), 'ActionsUrl' => $options['actionsUrl']));
        $payload = $this->version->update('POST', $this->uri, array(), $data);
        return new \ShopMagicTwilioVendor\Twilio\Rest\Preview\Understand\Assistant\TaskInstance($this->version, $payload, $this->solution['assistantSid'], $this->solution['sid']);
    }
    /**
     * Deletes the TaskInstance
     *
     * @return boolean True if delete succeeds, false otherwise
     * @throws TwilioException When an HTTP error occurs.
     */
    public function delete()
    {
        return $this->version->delete('delete', $this->uri);
    }
    /**
     * Access the fields
     *
     * @return \Twilio\Rest\Preview\Understand\Assistant\Task\FieldList
     */
    protected function getFields()
    {
        if (!$this->_fields) {
            $this->_fields = new \ShopMagicTwilioVendor\Twilio\Rest\Preview\Understand\Assistant\Task\FieldList($this->version, $this->solution['assistantSid'], $this->solution['sid']);
        }
        return $this->_fields;
    }
    /**
     * Access the samples
     *
     * @return \Twilio\Rest\Preview\Understand\Assistant\Task\SampleList
     */
    protected function getSamples()
    {
        if (!$this->_samples) {
            $this->_samples = new \ShopMagicTwilioVendor\Twilio\Rest\Preview\Understand\Assistant\Task\SampleList($this->version, $this->solution['assistantSid'], $this->solution['sid']);
        }
        return $this->_samples;
    }
    /**
     * Access the taskActions
     *
     * @return \Twilio\Rest\Preview\Understand\Assistant\Task\TaskActionsList
     */
    protected function getTaskActions()
    {
        if (!$this->_taskActions) {
            $this->_taskActions = new \ShopMagicTwilioVendor\Twilio\Rest\Preview\Understand\Assistant\Task\TaskActionsList($this->version, $this->solution['assistantSid'], $this->solution['sid']);
        }
        return $this->_taskActions;
    }
    /**
     * Access the statistics
     *
     * @return \Twilio\Rest\Preview\Understand\Assistant\Task\TaskStatisticsList
     */
    protected function getStatistics()
    {
        if (!$this->_statistics) {
            $this->_statistics = new \ShopMagicTwilioVendor\Twilio\Rest\Preview\Understand\Assistant\Task\TaskStatisticsList($this->version, $this->solution['assistantSid'], $this->solution['sid']);
        }
        return $this->_statistics;
    }
    /**
     * Magic getter to lazy load subresources
     *
     * @param string $name Subresource to return
     * @return \Twilio\ListResource The requested subresource
     * @throws TwilioException For unknown subresources
     */
    public function __get($name)
    {
        if (\property_exists($this, '_' . $name)) {
            $method = 'get' . \ucfirst($name);
            return $this->{$method}();
        }
        throw new \ShopMagicTwilioVendor\Twilio\Exceptions\TwilioException('Unknown subresource ' . $name);
    }
    /**
     * Magic caller to get resource contexts
     *
     * @param string $name Resource to return
     * @param array $arguments Context parameters
     * @return \Twilio\InstanceContext The requested resource context
     * @throws TwilioException For unknown resource
     */
    public function __call($name, $arguments)
    {
        $property = $this->{$name};
        if (\method_exists($property, 'getContext')) {
            return \call_user_func_array(array($property, 'getContext'), $arguments);
        }
        throw new \ShopMagicTwilioVendor\Twilio\Exceptions\TwilioException('Resource does not have a context');
    }
    /**
     * Provide a friendly representation
     *
     * @return string Machine friendly representation
     */
    public function __toString()
    {
        $context = array();
        foreach ($this->solution as $key => $value) {
            $context[] = "{$key}={$value}";
        }
        return '[Twilio.Preview.Understand.TaskContext ' . \implode(' ', $context) . ']';
    }
}
