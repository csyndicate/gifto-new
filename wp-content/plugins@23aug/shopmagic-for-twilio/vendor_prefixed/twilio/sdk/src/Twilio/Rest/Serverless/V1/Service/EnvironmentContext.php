<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */
namespace ShopMagicTwilioVendor\Twilio\Rest\Serverless\V1\Service;

use ShopMagicTwilioVendor\Twilio\Exceptions\TwilioException;
use ShopMagicTwilioVendor\Twilio\InstanceContext;
use ShopMagicTwilioVendor\Twilio\Rest\Serverless\V1\Service\Environment\DeploymentList;
use ShopMagicTwilioVendor\Twilio\Rest\Serverless\V1\Service\Environment\LogList;
use ShopMagicTwilioVendor\Twilio\Rest\Serverless\V1\Service\Environment\VariableList;
use ShopMagicTwilioVendor\Twilio\Values;
use ShopMagicTwilioVendor\Twilio\Version;
/**
 * PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
 *
 * @property \Twilio\Rest\Serverless\V1\Service\Environment\VariableList $variables
 * @property \Twilio\Rest\Serverless\V1\Service\Environment\DeploymentList $deployments
 * @property \Twilio\Rest\Serverless\V1\Service\Environment\LogList $logs
 * @method \Twilio\Rest\Serverless\V1\Service\Environment\VariableContext variables(string $sid)
 * @method \Twilio\Rest\Serverless\V1\Service\Environment\DeploymentContext deployments(string $sid)
 * @method \Twilio\Rest\Serverless\V1\Service\Environment\LogContext logs(string $sid)
 */
class EnvironmentContext extends \ShopMagicTwilioVendor\Twilio\InstanceContext
{
    protected $_variables = null;
    protected $_deployments = null;
    protected $_logs = null;
    /**
     * Initialize the EnvironmentContext
     *
     * @param \Twilio\Version $version Version that contains the resource
     * @param string $serviceSid The SID of the Service to fetch the Environment
     *                           resource from
     * @param string $sid The SID of the Environment resource to fetch
     * @return \Twilio\Rest\Serverless\V1\Service\EnvironmentContext
     */
    public function __construct(\ShopMagicTwilioVendor\Twilio\Version $version, $serviceSid, $sid)
    {
        parent::__construct($version);
        // Path Solution
        $this->solution = array('serviceSid' => $serviceSid, 'sid' => $sid);
        $this->uri = '/Services/' . \rawurlencode($serviceSid) . '/Environments/' . \rawurlencode($sid) . '';
    }
    /**
     * Fetch a EnvironmentInstance
     *
     * @return EnvironmentInstance Fetched EnvironmentInstance
     * @throws TwilioException When an HTTP error occurs.
     */
    public function fetch()
    {
        $params = \ShopMagicTwilioVendor\Twilio\Values::of(array());
        $payload = $this->version->fetch('GET', $this->uri, $params);
        return new \ShopMagicTwilioVendor\Twilio\Rest\Serverless\V1\Service\EnvironmentInstance($this->version, $payload, $this->solution['serviceSid'], $this->solution['sid']);
    }
    /**
     * Deletes the EnvironmentInstance
     *
     * @return boolean True if delete succeeds, false otherwise
     * @throws TwilioException When an HTTP error occurs.
     */
    public function delete()
    {
        return $this->version->delete('delete', $this->uri);
    }
    /**
     * Access the variables
     *
     * @return \Twilio\Rest\Serverless\V1\Service\Environment\VariableList
     */
    protected function getVariables()
    {
        if (!$this->_variables) {
            $this->_variables = new \ShopMagicTwilioVendor\Twilio\Rest\Serverless\V1\Service\Environment\VariableList($this->version, $this->solution['serviceSid'], $this->solution['sid']);
        }
        return $this->_variables;
    }
    /**
     * Access the deployments
     *
     * @return \Twilio\Rest\Serverless\V1\Service\Environment\DeploymentList
     */
    protected function getDeployments()
    {
        if (!$this->_deployments) {
            $this->_deployments = new \ShopMagicTwilioVendor\Twilio\Rest\Serverless\V1\Service\Environment\DeploymentList($this->version, $this->solution['serviceSid'], $this->solution['sid']);
        }
        return $this->_deployments;
    }
    /**
     * Access the logs
     *
     * @return \Twilio\Rest\Serverless\V1\Service\Environment\LogList
     */
    protected function getLogs()
    {
        if (!$this->_logs) {
            $this->_logs = new \ShopMagicTwilioVendor\Twilio\Rest\Serverless\V1\Service\Environment\LogList($this->version, $this->solution['serviceSid'], $this->solution['sid']);
        }
        return $this->_logs;
    }
    /**
     * Magic getter to lazy load subresources
     *
     * @param string $name Subresource to return
     * @return \Twilio\ListResource The requested subresource
     * @throws TwilioException For unknown subresources
     */
    public function __get($name)
    {
        if (\property_exists($this, '_' . $name)) {
            $method = 'get' . \ucfirst($name);
            return $this->{$method}();
        }
        throw new \ShopMagicTwilioVendor\Twilio\Exceptions\TwilioException('Unknown subresource ' . $name);
    }
    /**
     * Magic caller to get resource contexts
     *
     * @param string $name Resource to return
     * @param array $arguments Context parameters
     * @return \Twilio\InstanceContext The requested resource context
     * @throws TwilioException For unknown resource
     */
    public function __call($name, $arguments)
    {
        $property = $this->{$name};
        if (\method_exists($property, 'getContext')) {
            return \call_user_func_array(array($property, 'getContext'), $arguments);
        }
        throw new \ShopMagicTwilioVendor\Twilio\Exceptions\TwilioException('Resource does not have a context');
    }
    /**
     * Provide a friendly representation
     *
     * @return string Machine friendly representation
     */
    public function __toString()
    {
        $context = array();
        foreach ($this->solution as $key => $value) {
            $context[] = "{$key}={$value}";
        }
        return '[Twilio.Serverless.V1.EnvironmentContext ' . \implode(' ', $context) . ']';
    }
}
