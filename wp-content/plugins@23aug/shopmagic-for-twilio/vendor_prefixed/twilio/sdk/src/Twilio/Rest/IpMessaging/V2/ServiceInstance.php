<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */
namespace ShopMagicTwilioVendor\Twilio\Rest\IpMessaging\V2;

use ShopMagicTwilioVendor\Twilio\Deserialize;
use ShopMagicTwilioVendor\Twilio\Exceptions\TwilioException;
use ShopMagicTwilioVendor\Twilio\InstanceResource;
use ShopMagicTwilioVendor\Twilio\Options;
use ShopMagicTwilioVendor\Twilio\Values;
use ShopMagicTwilioVendor\Twilio\Version;
/**
 * @property string $sid
 * @property string $accountSid
 * @property string $friendlyName
 * @property \DateTime $dateCreated
 * @property \DateTime $dateUpdated
 * @property string $defaultServiceRoleSid
 * @property string $defaultChannelRoleSid
 * @property string $defaultChannelCreatorRoleSid
 * @property bool $readStatusEnabled
 * @property bool $reachabilityEnabled
 * @property int $typingIndicatorTimeout
 * @property int $consumptionReportInterval
 * @property array $limits
 * @property string $preWebhookUrl
 * @property string $postWebhookUrl
 * @property string $webhookMethod
 * @property string $webhookFilters
 * @property int $preWebhookRetryCount
 * @property int $postWebhookRetryCount
 * @property array $notifications
 * @property array $media
 * @property string $url
 * @property array $links
 */
class ServiceInstance extends \ShopMagicTwilioVendor\Twilio\InstanceResource
{
    protected $_channels = null;
    protected $_roles = null;
    protected $_users = null;
    protected $_bindings = null;
    /**
     * Initialize the ServiceInstance
     *
     * @param \Twilio\Version $version Version that contains the resource
     * @param mixed[] $payload The response payload
     * @param string $sid The SID of the Service resource to fetch
     * @return \Twilio\Rest\IpMessaging\V2\ServiceInstance
     */
    public function __construct(\ShopMagicTwilioVendor\Twilio\Version $version, array $payload, $sid = null)
    {
        parent::__construct($version);
        // Marshaled Properties
        $this->properties = array('sid' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'sid'), 'accountSid' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'account_sid'), 'friendlyName' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'friendly_name'), 'dateCreated' => \ShopMagicTwilioVendor\Twilio\Deserialize::dateTime(\ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'date_created')), 'dateUpdated' => \ShopMagicTwilioVendor\Twilio\Deserialize::dateTime(\ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'date_updated')), 'defaultServiceRoleSid' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'default_service_role_sid'), 'defaultChannelRoleSid' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'default_channel_role_sid'), 'defaultChannelCreatorRoleSid' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'default_channel_creator_role_sid'), 'readStatusEnabled' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'read_status_enabled'), 'reachabilityEnabled' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'reachability_enabled'), 'typingIndicatorTimeout' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'typing_indicator_timeout'), 'consumptionReportInterval' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'consumption_report_interval'), 'limits' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'limits'), 'preWebhookUrl' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'pre_webhook_url'), 'postWebhookUrl' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'post_webhook_url'), 'webhookMethod' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'webhook_method'), 'webhookFilters' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'webhook_filters'), 'preWebhookRetryCount' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'pre_webhook_retry_count'), 'postWebhookRetryCount' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'post_webhook_retry_count'), 'notifications' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'notifications'), 'media' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'media'), 'url' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'url'), 'links' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'links'));
        $this->solution = array('sid' => $sid ?: $this->properties['sid']);
    }
    /**
     * Generate an instance context for the instance, the context is capable of
     * performing various actions.  All instance actions are proxied to the context
     *
     * @return \Twilio\Rest\IpMessaging\V2\ServiceContext Context for this
     *                                                    ServiceInstance
     */
    protected function proxy()
    {
        if (!$this->context) {
            $this->context = new \ShopMagicTwilioVendor\Twilio\Rest\IpMessaging\V2\ServiceContext($this->version, $this->solution['sid']);
        }
        return $this->context;
    }
    /**
     * Fetch a ServiceInstance
     *
     * @return ServiceInstance Fetched ServiceInstance
     * @throws TwilioException When an HTTP error occurs.
     */
    public function fetch()
    {
        return $this->proxy()->fetch();
    }
    /**
     * Deletes the ServiceInstance
     *
     * @return boolean True if delete succeeds, false otherwise
     * @throws TwilioException When an HTTP error occurs.
     */
    public function delete()
    {
        return $this->proxy()->delete();
    }
    /**
     * Update the ServiceInstance
     *
     * @param array|Options $options Optional Arguments
     * @return ServiceInstance Updated ServiceInstance
     * @throws TwilioException When an HTTP error occurs.
     */
    public function update($options = array())
    {
        return $this->proxy()->update($options);
    }
    /**
     * Access the channels
     *
     * @return \Twilio\Rest\IpMessaging\V2\Service\ChannelList
     */
    protected function getChannels()
    {
        return $this->proxy()->channels;
    }
    /**
     * Access the roles
     *
     * @return \Twilio\Rest\IpMessaging\V2\Service\RoleList
     */
    protected function getRoles()
    {
        return $this->proxy()->roles;
    }
    /**
     * Access the users
     *
     * @return \Twilio\Rest\IpMessaging\V2\Service\UserList
     */
    protected function getUsers()
    {
        return $this->proxy()->users;
    }
    /**
     * Access the bindings
     *
     * @return \Twilio\Rest\IpMessaging\V2\Service\BindingList
     */
    protected function getBindings()
    {
        return $this->proxy()->bindings;
    }
    /**
     * Magic getter to access properties
     *
     * @param string $name Property to access
     * @return mixed The requested property
     * @throws TwilioException For unknown properties
     */
    public function __get($name)
    {
        if (\array_key_exists($name, $this->properties)) {
            return $this->properties[$name];
        }
        if (\property_exists($this, '_' . $name)) {
            $method = 'get' . \ucfirst($name);
            return $this->{$method}();
        }
        throw new \ShopMagicTwilioVendor\Twilio\Exceptions\TwilioException('Unknown property: ' . $name);
    }
    /**
     * Provide a friendly representation
     *
     * @return string Machine friendly representation
     */
    public function __toString()
    {
        $context = array();
        foreach ($this->solution as $key => $value) {
            $context[] = "{$key}={$value}";
        }
        return '[Twilio.IpMessaging.V2.ServiceInstance ' . \implode(' ', $context) . ']';
    }
}
