<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */
namespace ShopMagicTwilioVendor\Twilio\Rest\Messaging\V1;

use ShopMagicTwilioVendor\Twilio\Deserialize;
use ShopMagicTwilioVendor\Twilio\Exceptions\TwilioException;
use ShopMagicTwilioVendor\Twilio\InstanceResource;
use ShopMagicTwilioVendor\Twilio\Options;
use ShopMagicTwilioVendor\Twilio\Values;
use ShopMagicTwilioVendor\Twilio\Version;
/**
 * PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
 *
 * @property string $sid
 * @property string $accountSid
 * @property string $friendlyName
 * @property \DateTime $dateCreated
 * @property \DateTime $dateUpdated
 * @property string $inboundRequestUrl
 * @property string $inboundMethod
 * @property string $fallbackUrl
 * @property string $fallbackMethod
 * @property string $statusCallback
 * @property bool $stickySender
 * @property bool $mmsConverter
 * @property bool $smartEncoding
 * @property string $scanMessageContent
 * @property bool $fallbackToLongCode
 * @property bool $areaCodeGeomatch
 * @property bool $synchronousValidation
 * @property int $validityPeriod
 * @property string $url
 * @property array $links
 */
class ServiceInstance extends \ShopMagicTwilioVendor\Twilio\InstanceResource
{
    protected $_phoneNumbers = null;
    protected $_shortCodes = null;
    protected $_alphaSenders = null;
    /**
     * Initialize the ServiceInstance
     *
     * @param \Twilio\Version $version Version that contains the resource
     * @param mixed[] $payload The response payload
     * @param string $sid The SID that identifies the resource to fetch
     * @return \Twilio\Rest\Messaging\V1\ServiceInstance
     */
    public function __construct(\ShopMagicTwilioVendor\Twilio\Version $version, array $payload, $sid = null)
    {
        parent::__construct($version);
        // Marshaled Properties
        $this->properties = array('sid' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'sid'), 'accountSid' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'account_sid'), 'friendlyName' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'friendly_name'), 'dateCreated' => \ShopMagicTwilioVendor\Twilio\Deserialize::dateTime(\ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'date_created')), 'dateUpdated' => \ShopMagicTwilioVendor\Twilio\Deserialize::dateTime(\ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'date_updated')), 'inboundRequestUrl' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'inbound_request_url'), 'inboundMethod' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'inbound_method'), 'fallbackUrl' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'fallback_url'), 'fallbackMethod' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'fallback_method'), 'statusCallback' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'status_callback'), 'stickySender' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'sticky_sender'), 'mmsConverter' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'mms_converter'), 'smartEncoding' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'smart_encoding'), 'scanMessageContent' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'scan_message_content'), 'fallbackToLongCode' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'fallback_to_long_code'), 'areaCodeGeomatch' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'area_code_geomatch'), 'synchronousValidation' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'synchronous_validation'), 'validityPeriod' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'validity_period'), 'url' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'url'), 'links' => \ShopMagicTwilioVendor\Twilio\Values::array_get($payload, 'links'));
        $this->solution = array('sid' => $sid ?: $this->properties['sid']);
    }
    /**
     * Generate an instance context for the instance, the context is capable of
     * performing various actions.  All instance actions are proxied to the context
     *
     * @return \Twilio\Rest\Messaging\V1\ServiceContext Context for this
     *                                                  ServiceInstance
     */
    protected function proxy()
    {
        if (!$this->context) {
            $this->context = new \ShopMagicTwilioVendor\Twilio\Rest\Messaging\V1\ServiceContext($this->version, $this->solution['sid']);
        }
        return $this->context;
    }
    /**
     * Update the ServiceInstance
     *
     * @param array|Options $options Optional Arguments
     * @return ServiceInstance Updated ServiceInstance
     * @throws TwilioException When an HTTP error occurs.
     */
    public function update($options = array())
    {
        return $this->proxy()->update($options);
    }
    /**
     * Fetch a ServiceInstance
     *
     * @return ServiceInstance Fetched ServiceInstance
     * @throws TwilioException When an HTTP error occurs.
     */
    public function fetch()
    {
        return $this->proxy()->fetch();
    }
    /**
     * Deletes the ServiceInstance
     *
     * @return boolean True if delete succeeds, false otherwise
     * @throws TwilioException When an HTTP error occurs.
     */
    public function delete()
    {
        return $this->proxy()->delete();
    }
    /**
     * Access the phoneNumbers
     *
     * @return \Twilio\Rest\Messaging\V1\Service\PhoneNumberList
     */
    protected function getPhoneNumbers()
    {
        return $this->proxy()->phoneNumbers;
    }
    /**
     * Access the shortCodes
     *
     * @return \Twilio\Rest\Messaging\V1\Service\ShortCodeList
     */
    protected function getShortCodes()
    {
        return $this->proxy()->shortCodes;
    }
    /**
     * Access the alphaSenders
     *
     * @return \Twilio\Rest\Messaging\V1\Service\AlphaSenderList
     */
    protected function getAlphaSenders()
    {
        return $this->proxy()->alphaSenders;
    }
    /**
     * Magic getter to access properties
     *
     * @param string $name Property to access
     * @return mixed The requested property
     * @throws TwilioException For unknown properties
     */
    public function __get($name)
    {
        if (\array_key_exists($name, $this->properties)) {
            return $this->properties[$name];
        }
        if (\property_exists($this, '_' . $name)) {
            $method = 'get' . \ucfirst($name);
            return $this->{$method}();
        }
        throw new \ShopMagicTwilioVendor\Twilio\Exceptions\TwilioException('Unknown property: ' . $name);
    }
    /**
     * Provide a friendly representation
     *
     * @return string Machine friendly representation
     */
    public function __toString()
    {
        $context = array();
        foreach ($this->solution as $key => $value) {
            $context[] = "{$key}={$value}";
        }
        return '[Twilio.Messaging.V1.ServiceInstance ' . \implode(' ', $context) . ']';
    }
}
