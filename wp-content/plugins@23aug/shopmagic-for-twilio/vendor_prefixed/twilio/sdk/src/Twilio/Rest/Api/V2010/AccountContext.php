<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */
namespace ShopMagicTwilioVendor\Twilio\Rest\Api\V2010;

use ShopMagicTwilioVendor\Twilio\Exceptions\TwilioException;
use ShopMagicTwilioVendor\Twilio\InstanceContext;
use ShopMagicTwilioVendor\Twilio\Options;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\AddressList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\ApplicationList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\AuthorizedConnectAppList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\AvailablePhoneNumberCountryList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\BalanceList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\CallList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\ConferenceList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\ConnectAppList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\IncomingPhoneNumberList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\KeyList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\MessageList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\NewKeyList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\NewSigningKeyList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\NotificationList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\OutgoingCallerIdList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\QueueList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\RecordingList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\ShortCodeList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\SigningKeyList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\SipList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\TokenList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\TranscriptionList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\UsageList;
use ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\ValidationRequestList;
use ShopMagicTwilioVendor\Twilio\Values;
use ShopMagicTwilioVendor\Twilio\Version;
/**
 * @property \Twilio\Rest\Api\V2010\Account\AddressList $addresses
 * @property \Twilio\Rest\Api\V2010\Account\ApplicationList $applications
 * @property \Twilio\Rest\Api\V2010\Account\AuthorizedConnectAppList $authorizedConnectApps
 * @property \Twilio\Rest\Api\V2010\Account\AvailablePhoneNumberCountryList $availablePhoneNumbers
 * @property \Twilio\Rest\Api\V2010\Account\BalanceList $balance
 * @property \Twilio\Rest\Api\V2010\Account\CallList $calls
 * @property \Twilio\Rest\Api\V2010\Account\ConferenceList $conferences
 * @property \Twilio\Rest\Api\V2010\Account\ConnectAppList $connectApps
 * @property \Twilio\Rest\Api\V2010\Account\IncomingPhoneNumberList $incomingPhoneNumbers
 * @property \Twilio\Rest\Api\V2010\Account\KeyList $keys
 * @property \Twilio\Rest\Api\V2010\Account\MessageList $messages
 * @property \Twilio\Rest\Api\V2010\Account\NewKeyList $newKeys
 * @property \Twilio\Rest\Api\V2010\Account\NewSigningKeyList $newSigningKeys
 * @property \Twilio\Rest\Api\V2010\Account\NotificationList $notifications
 * @property \Twilio\Rest\Api\V2010\Account\OutgoingCallerIdList $outgoingCallerIds
 * @property \Twilio\Rest\Api\V2010\Account\QueueList $queues
 * @property \Twilio\Rest\Api\V2010\Account\RecordingList $recordings
 * @property \Twilio\Rest\Api\V2010\Account\SigningKeyList $signingKeys
 * @property \Twilio\Rest\Api\V2010\Account\SipList $sip
 * @property \Twilio\Rest\Api\V2010\Account\ShortCodeList $shortCodes
 * @property \Twilio\Rest\Api\V2010\Account\TokenList $tokens
 * @property \Twilio\Rest\Api\V2010\Account\TranscriptionList $transcriptions
 * @property \Twilio\Rest\Api\V2010\Account\UsageList $usage
 * @property \Twilio\Rest\Api\V2010\Account\ValidationRequestList $validationRequests
 * @method \Twilio\Rest\Api\V2010\Account\AddressContext addresses(string $sid)
 * @method \Twilio\Rest\Api\V2010\Account\ApplicationContext applications(string $sid)
 * @method \Twilio\Rest\Api\V2010\Account\AuthorizedConnectAppContext authorizedConnectApps(string $connectAppSid)
 * @method \Twilio\Rest\Api\V2010\Account\AvailablePhoneNumberCountryContext availablePhoneNumbers(string $countryCode)
 * @method \Twilio\Rest\Api\V2010\Account\CallContext calls(string $sid)
 * @method \Twilio\Rest\Api\V2010\Account\ConferenceContext conferences(string $sid)
 * @method \Twilio\Rest\Api\V2010\Account\ConnectAppContext connectApps(string $sid)
 * @method \Twilio\Rest\Api\V2010\Account\IncomingPhoneNumberContext incomingPhoneNumbers(string $sid)
 * @method \Twilio\Rest\Api\V2010\Account\KeyContext keys(string $sid)
 * @method \Twilio\Rest\Api\V2010\Account\MessageContext messages(string $sid)
 * @method \Twilio\Rest\Api\V2010\Account\NotificationContext notifications(string $sid)
 * @method \Twilio\Rest\Api\V2010\Account\OutgoingCallerIdContext outgoingCallerIds(string $sid)
 * @method \Twilio\Rest\Api\V2010\Account\QueueContext queues(string $sid)
 * @method \Twilio\Rest\Api\V2010\Account\RecordingContext recordings(string $sid)
 * @method \Twilio\Rest\Api\V2010\Account\SigningKeyContext signingKeys(string $sid)
 * @method \Twilio\Rest\Api\V2010\Account\ShortCodeContext shortCodes(string $sid)
 * @method \Twilio\Rest\Api\V2010\Account\TranscriptionContext transcriptions(string $sid)
 */
class AccountContext extends \ShopMagicTwilioVendor\Twilio\InstanceContext
{
    protected $_addresses = null;
    protected $_applications = null;
    protected $_authorizedConnectApps = null;
    protected $_availablePhoneNumbers = null;
    protected $_balance = null;
    protected $_calls = null;
    protected $_conferences = null;
    protected $_connectApps = null;
    protected $_incomingPhoneNumbers = null;
    protected $_keys = null;
    protected $_messages = null;
    protected $_newKeys = null;
    protected $_newSigningKeys = null;
    protected $_notifications = null;
    protected $_outgoingCallerIds = null;
    protected $_queues = null;
    protected $_recordings = null;
    protected $_signingKeys = null;
    protected $_sip = null;
    protected $_shortCodes = null;
    protected $_tokens = null;
    protected $_transcriptions = null;
    protected $_usage = null;
    protected $_validationRequests = null;
    /**
     * Initialize the AccountContext
     *
     * @param \Twilio\Version $version Version that contains the resource
     * @param string $sid Fetch by unique Account Sid
     * @return \Twilio\Rest\Api\V2010\AccountContext
     */
    public function __construct(\ShopMagicTwilioVendor\Twilio\Version $version, $sid)
    {
        parent::__construct($version);
        // Path Solution
        $this->solution = array('sid' => $sid);
        $this->uri = '/Accounts/' . \rawurlencode($sid) . '.json';
    }
    /**
     * Fetch a AccountInstance
     *
     * @return AccountInstance Fetched AccountInstance
     * @throws TwilioException When an HTTP error occurs.
     */
    public function fetch()
    {
        $params = \ShopMagicTwilioVendor\Twilio\Values::of(array());
        $payload = $this->version->fetch('GET', $this->uri, $params);
        return new \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\AccountInstance($this->version, $payload, $this->solution['sid']);
    }
    /**
     * Update the AccountInstance
     *
     * @param array|Options $options Optional Arguments
     * @return AccountInstance Updated AccountInstance
     * @throws TwilioException When an HTTP error occurs.
     */
    public function update($options = array())
    {
        $options = new \ShopMagicTwilioVendor\Twilio\Values($options);
        $data = \ShopMagicTwilioVendor\Twilio\Values::of(array('FriendlyName' => $options['friendlyName'], 'Status' => $options['status']));
        $payload = $this->version->update('POST', $this->uri, array(), $data);
        return new \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\AccountInstance($this->version, $payload, $this->solution['sid']);
    }
    /**
     * Access the addresses
     *
     * @return \Twilio\Rest\Api\V2010\Account\AddressList
     */
    protected function getAddresses()
    {
        if (!$this->_addresses) {
            $this->_addresses = new \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\AddressList($this->version, $this->solution['sid']);
        }
        return $this->_addresses;
    }
    /**
     * Access the applications
     *
     * @return \Twilio\Rest\Api\V2010\Account\ApplicationList
     */
    protected function getApplications()
    {
        if (!$this->_applications) {
            $this->_applications = new \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\ApplicationList($this->version, $this->solution['sid']);
        }
        return $this->_applications;
    }
    /**
     * Access the authorizedConnectApps
     *
     * @return \Twilio\Rest\Api\V2010\Account\AuthorizedConnectAppList
     */
    protected function getAuthorizedConnectApps()
    {
        if (!$this->_authorizedConnectApps) {
            $this->_authorizedConnectApps = new \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\AuthorizedConnectAppList($this->version, $this->solution['sid']);
        }
        return $this->_authorizedConnectApps;
    }
    /**
     * Access the availablePhoneNumbers
     *
     * @return \Twilio\Rest\Api\V2010\Account\AvailablePhoneNumberCountryList
     */
    protected function getAvailablePhoneNumbers()
    {
        if (!$this->_availablePhoneNumbers) {
            $this->_availablePhoneNumbers = new \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\AvailablePhoneNumberCountryList($this->version, $this->solution['sid']);
        }
        return $this->_availablePhoneNumbers;
    }
    /**
     * Access the balance
     *
     * @return \Twilio\Rest\Api\V2010\Account\BalanceList
     */
    protected function getBalance()
    {
        if (!$this->_balance) {
            $this->_balance = new \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\BalanceList($this->version, $this->solution['sid']);
        }
        return $this->_balance;
    }
    /**
     * Access the calls
     *
     * @return \Twilio\Rest\Api\V2010\Account\CallList
     */
    protected function getCalls()
    {
        if (!$this->_calls) {
            $this->_calls = new \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\CallList($this->version, $this->solution['sid']);
        }
        return $this->_calls;
    }
    /**
     * Access the conferences
     *
     * @return \Twilio\Rest\Api\V2010\Account\ConferenceList
     */
    protected function getConferences()
    {
        if (!$this->_conferences) {
            $this->_conferences = new \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\ConferenceList($this->version, $this->solution['sid']);
        }
        return $this->_conferences;
    }
    /**
     * Access the connectApps
     *
     * @return \Twilio\Rest\Api\V2010\Account\ConnectAppList
     */
    protected function getConnectApps()
    {
        if (!$this->_connectApps) {
            $this->_connectApps = new \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\ConnectAppList($this->version, $this->solution['sid']);
        }
        return $this->_connectApps;
    }
    /**
     * Access the incomingPhoneNumbers
     *
     * @return \Twilio\Rest\Api\V2010\Account\IncomingPhoneNumberList
     */
    protected function getIncomingPhoneNumbers()
    {
        if (!$this->_incomingPhoneNumbers) {
            $this->_incomingPhoneNumbers = new \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\IncomingPhoneNumberList($this->version, $this->solution['sid']);
        }
        return $this->_incomingPhoneNumbers;
    }
    /**
     * Access the keys
     *
     * @return \Twilio\Rest\Api\V2010\Account\KeyList
     */
    protected function getKeys()
    {
        if (!$this->_keys) {
            $this->_keys = new \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\KeyList($this->version, $this->solution['sid']);
        }
        return $this->_keys;
    }
    /**
     * Access the messages
     *
     * @return \Twilio\Rest\Api\V2010\Account\MessageList
     */
    protected function getMessages()
    {
        if (!$this->_messages) {
            $this->_messages = new \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\MessageList($this->version, $this->solution['sid']);
        }
        return $this->_messages;
    }
    /**
     * Access the newKeys
     *
     * @return \Twilio\Rest\Api\V2010\Account\NewKeyList
     */
    protected function getNewKeys()
    {
        if (!$this->_newKeys) {
            $this->_newKeys = new \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\NewKeyList($this->version, $this->solution['sid']);
        }
        return $this->_newKeys;
    }
    /**
     * Access the newSigningKeys
     *
     * @return \Twilio\Rest\Api\V2010\Account\NewSigningKeyList
     */
    protected function getNewSigningKeys()
    {
        if (!$this->_newSigningKeys) {
            $this->_newSigningKeys = new \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\NewSigningKeyList($this->version, $this->solution['sid']);
        }
        return $this->_newSigningKeys;
    }
    /**
     * Access the notifications
     *
     * @return \Twilio\Rest\Api\V2010\Account\NotificationList
     */
    protected function getNotifications()
    {
        if (!$this->_notifications) {
            $this->_notifications = new \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\NotificationList($this->version, $this->solution['sid']);
        }
        return $this->_notifications;
    }
    /**
     * Access the outgoingCallerIds
     *
     * @return \Twilio\Rest\Api\V2010\Account\OutgoingCallerIdList
     */
    protected function getOutgoingCallerIds()
    {
        if (!$this->_outgoingCallerIds) {
            $this->_outgoingCallerIds = new \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\OutgoingCallerIdList($this->version, $this->solution['sid']);
        }
        return $this->_outgoingCallerIds;
    }
    /**
     * Access the queues
     *
     * @return \Twilio\Rest\Api\V2010\Account\QueueList
     */
    protected function getQueues()
    {
        if (!$this->_queues) {
            $this->_queues = new \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\QueueList($this->version, $this->solution['sid']);
        }
        return $this->_queues;
    }
    /**
     * Access the recordings
     *
     * @return \Twilio\Rest\Api\V2010\Account\RecordingList
     */
    protected function getRecordings()
    {
        if (!$this->_recordings) {
            $this->_recordings = new \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\RecordingList($this->version, $this->solution['sid']);
        }
        return $this->_recordings;
    }
    /**
     * Access the signingKeys
     *
     * @return \Twilio\Rest\Api\V2010\Account\SigningKeyList
     */
    protected function getSigningKeys()
    {
        if (!$this->_signingKeys) {
            $this->_signingKeys = new \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\SigningKeyList($this->version, $this->solution['sid']);
        }
        return $this->_signingKeys;
    }
    /**
     * Access the sip
     *
     * @return \Twilio\Rest\Api\V2010\Account\SipList
     */
    protected function getSip()
    {
        if (!$this->_sip) {
            $this->_sip = new \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\SipList($this->version, $this->solution['sid']);
        }
        return $this->_sip;
    }
    /**
     * Access the shortCodes
     *
     * @return \Twilio\Rest\Api\V2010\Account\ShortCodeList
     */
    protected function getShortCodes()
    {
        if (!$this->_shortCodes) {
            $this->_shortCodes = new \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\ShortCodeList($this->version, $this->solution['sid']);
        }
        return $this->_shortCodes;
    }
    /**
     * Access the tokens
     *
     * @return \Twilio\Rest\Api\V2010\Account\TokenList
     */
    protected function getTokens()
    {
        if (!$this->_tokens) {
            $this->_tokens = new \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\TokenList($this->version, $this->solution['sid']);
        }
        return $this->_tokens;
    }
    /**
     * Access the transcriptions
     *
     * @return \Twilio\Rest\Api\V2010\Account\TranscriptionList
     */
    protected function getTranscriptions()
    {
        if (!$this->_transcriptions) {
            $this->_transcriptions = new \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\TranscriptionList($this->version, $this->solution['sid']);
        }
        return $this->_transcriptions;
    }
    /**
     * Access the usage
     *
     * @return \Twilio\Rest\Api\V2010\Account\UsageList
     */
    protected function getUsage()
    {
        if (!$this->_usage) {
            $this->_usage = new \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\UsageList($this->version, $this->solution['sid']);
        }
        return $this->_usage;
    }
    /**
     * Access the validationRequests
     *
     * @return \Twilio\Rest\Api\V2010\Account\ValidationRequestList
     */
    protected function getValidationRequests()
    {
        if (!$this->_validationRequests) {
            $this->_validationRequests = new \ShopMagicTwilioVendor\Twilio\Rest\Api\V2010\Account\ValidationRequestList($this->version, $this->solution['sid']);
        }
        return $this->_validationRequests;
    }
    /**
     * Magic getter to lazy load subresources
     *
     * @param string $name Subresource to return
     * @return \Twilio\ListResource The requested subresource
     * @throws TwilioException For unknown subresources
     */
    public function __get($name)
    {
        if (\property_exists($this, '_' . $name)) {
            $method = 'get' . \ucfirst($name);
            return $this->{$method}();
        }
        throw new \ShopMagicTwilioVendor\Twilio\Exceptions\TwilioException('Unknown subresource ' . $name);
    }
    /**
     * Magic caller to get resource contexts
     *
     * @param string $name Resource to return
     * @param array $arguments Context parameters
     * @return \Twilio\InstanceContext The requested resource context
     * @throws TwilioException For unknown resource
     */
    public function __call($name, $arguments)
    {
        $property = $this->{$name};
        if (\method_exists($property, 'getContext')) {
            return \call_user_func_array(array($property, 'getContext'), $arguments);
        }
        throw new \ShopMagicTwilioVendor\Twilio\Exceptions\TwilioException('Resource does not have a context');
    }
    /**
     * Provide a friendly representation
     *
     * @return string Machine friendly representation
     */
    public function __toString()
    {
        $context = array();
        foreach ($this->solution as $key => $value) {
            $context[] = "{$key}={$value}";
        }
        return '[Twilio.Api.V2010.AccountContext ' . \implode(' ', $context) . ']';
    }
}
